// Decompiled by DJ v3.12.12.96 Copyright 2011 Atanas Neshkov  Date: 3/9/2012 11:11:53 PM
// Home Page: http://members.fortunecity.com/neshkov/dj.html http://www.neshkov.com/dj.html - Check often for new version!
// Decompiler options: packimports(3) 
// Source File Name:   MultiElevator.java

package com.bradsproject.BradleyJewell.bLift;

import java.io.PrintStream;
import java.util.*;
import org.bukkit.*;
import org.bukkit.block.*;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitScheduler;
import org.bukkit.util.Vector;

// Referenced classes of package com.bradsproject.BradleyJewell.bLift:
//            bLift

public class MultiElevator
    implements Runnable
{

    public MultiElevator(bLift instance, Block block, boolean run)
    {
        isMulti = false;
        plugin = instance;
        button = block;
        floors = new HashMap();
        glasses = new ArrayList();
        if(isMultiElevator())
        {
            isMulti = true;
            if(run)
                prepareMultiElevator();
        } else
        {
            isMulti = false;
        }
    }

    public void say(String msg)
    {
        System.out.println(msg);
    }

    public void prepareMultiElevator()
    {
        for(Iterator iterator = button.getWorld().getPlayers().iterator(); iterator.hasNext();)
        {
            Player p = (Player)iterator.next();
            if(isInMultiElevator(p))
            {
                player = p;
                Block glass;
                for(Iterator iterator1 = glasses.iterator(); iterator1.hasNext(); glass.setType(Material.AIR))
                    glass = (Block)iterator1.next();

                Sign s = (Sign)curFloor.getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP).getState();
                try
                {
                    curDest = (Block)floors.get(Integer.valueOf(Integer.parseInt(s.getLine(3))));
                }
                catch(NumberFormatException e)
                {
                    curDest = (Block)floors.get(Integer.valueOf(1));
                    s.setLine(3, "1");
                    sign.update();
                }
                Location loc = curFloor.getLocation();
                double x = loc.getX() + 0.5D;
                double y = loc.getY() + 1.5D;
                double z = loc.getZ() + 0.5D;
                float yaw = player.getLocation().getYaw();
                float pitch = player.getLocation().getPitch();
                player.teleport(new Location(player.getWorld(), x, y, z, yaw, pitch));
                player.setVelocity(new Vector(0, 0, 0));
                plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, this, 1L);
                return;
            }
        }

    }

    public boolean isInMultiElevator(Player p)
    {
        Location inside = new Location(curFloor.getWorld(), curFloor.getX(), curFloor.getY() + 1, curFloor.getZ());
        Location loc = p.getLocation();
        return loc.getX() < inside.getX() + 1.0D && loc.getX() > inside.getX() - 1.0D && loc.getY() < inside.getY() + 1.0D && loc.getY() > inside.getY() - 1.0D && loc.getZ() < inside.getZ() + 1.0D && loc.getZ() > inside.getZ() - 1.0D;
    }

    public boolean isMultiElevator()
    {
        Material mat = button.getType();
        double curHeight = button.getFace(BlockFace.DOWN).getFace(BlockFace.DOWN).getLocation().getY();
        if(mat == Material.STONE_BUTTON)
        {
            if(button.getFace(BlockFace.UP).getType() == Material.WALL_SIGN && (button.getFace(BlockFace.UP).getFace(BlockFace.UP).getType() == Material.GLASS || button.getFace(BlockFace.UP).getFace(BlockFace.UP).getType() == Material.IRON_BLOCK) && (button.getFace(BlockFace.DOWN).getFace(BlockFace.DOWN).getType() == Material.GLASS || button.getFace(BlockFace.DOWN).getFace(BlockFace.DOWN).getType() == Material.IRON_BLOCK))
            {
                sign = (Sign)button.getFace(BlockFace.UP).getState();
                if(button.getFace(BlockFace.DOWN).getFace(BlockFace.DOWN).getType() == Material.IRON_BLOCK)
                {
                    bottom = button.getFace(BlockFace.DOWN).getFace(BlockFace.DOWN);
                } else
                {
                    Block temp;
                    for(temp = button; temp.getType() != Material.IRON_BLOCK;)
                    {
                        temp = temp.getFace(BlockFace.DOWN);
                        if(temp.getLocation().getY() < 1.0D)
                            return false;
                    }

                    bottom = temp;
                }
                if(button.getFace(BlockFace.UP).getFace(BlockFace.UP).getType() == Material.IRON_BLOCK)
                {
                    top = button.getFace(BlockFace.UP).getFace(BlockFace.UP);
                } else
                {
                    Block temp;
                    for(temp = button; temp.getType() != Material.IRON_BLOCK;)
                    {
                        temp = temp.getFace(BlockFace.UP);
                        if(temp.getLocation().getY() > 128D)
                            return false;
                    }

                    top = temp;
                }
                for(Block tempG = bottom; tempG.getLocation().getY() < top.getLocation().getY(); tempG = tempG.getFace(BlockFace.UP))
                    if(tempG.getType() == Material.GLASS)
                        glasses.add(tempG);

                for(Block temp = bottom; temp.getLocation().getY() < top.getLocation().getY();)
                    if(temp.getType() == Material.IRON_BLOCK)
                    {
                        if(temp.getFace(BlockFace.UP).getFace(BlockFace.UP).getType() == Material.STONE_BUTTON && temp.getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP).getType() == Material.WALL_SIGN && temp.getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP).getType() == Material.GLASS)
                        {
                            floors.put(Integer.valueOf(floors.size() + 1), temp);
                            Sign s = (Sign)temp.getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP).getState();
                            s.setLine(1, Integer.toString(floors.size()));
                            s.update();
                            if(temp.getLocation().getY() == curHeight)
                                curFloor = temp;
                        } else
                        {
                            return false;
                        }
                        temp = temp.getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP);
                    } else
                    if(temp.getType() == Material.GLASS)
                    {
                        if(temp.getFace(BlockFace.UP).getFace(BlockFace.UP).getType() == Material.STONE_BUTTON && temp.getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP).getType() == Material.WALL_SIGN && (temp.getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP).getType() == Material.GLASS || temp.getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP).getType() == Material.IRON_BLOCK))
                        {
                            floors.put(Integer.valueOf(floors.size() + 1), temp);
                            Sign s = (Sign)temp.getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP).getState();
                            s.setLine(1, Integer.toString(floors.size()));
                            s.update();
                            if(temp.getLocation().getY() == curHeight)
                                curFloor = temp;
                        } else
                        {
                            return false;
                        }
                        temp = temp.getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP).getFace(BlockFace.UP);
                    } else
                    {
                        if(temp.getType() != Material.AIR)
                            return false;
                        temp = temp.getFace(BlockFace.UP);
                    }

            } else
            {
                return false;
            }
        } else
        {
            return false;
        }
        return true;
    }

    public void run()
    {
        if(!player.isOnline())
        {
            Block glass;
            for(Iterator iterator = glasses.iterator(); iterator.hasNext(); glass.setType(Material.GLASS))
                glass = (Block)iterator.next();

            return;
        }
        if(curFloor.getLocation().getY() < curDest.getLocation().getY())
        {
            if(player.getLocation().getY() < curDest.getLocation().getY() + 1.0D)
            {
                player.setVelocity(new Vector(0.0D, 0.5D, 0.0D));
                player.setFallDistance(0.0F);
                plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, this, 1L);
            } else
            {
                Location loc = curDest.getLocation();
                double x = loc.getX() + 0.5D;
                double y = loc.getY() + 1.5D;
                double z = loc.getZ() + 0.5D;
                float yaw = player.getLocation().getYaw();
                float pitch = player.getLocation().getPitch();
                player.setVelocity(new Vector(0, 0, 0));
                player.teleport(new Location(player.getWorld(), x, y, z, yaw, pitch));
                player.setFallDistance(0.0F);
                Block glass;
                for(Iterator iterator1 = glasses.iterator(); iterator1.hasNext(); glass.setType(Material.GLASS))
                    glass = (Block)iterator1.next();

            }
        } else
        if(curFloor.getLocation().getY() > curDest.getLocation().getY())
            if(player.getLocation().getY() > curDest.getLocation().getY() + 1.0D)
            {
                player.setVelocity(new Vector(0.0D, -0.5D, 0.0D));
                player.setFallDistance(0.0F);
                plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, this, 1L);
            } else
            {
                Location loc = curDest.getLocation();
                double x = loc.getX() + 0.5D;
                double y = loc.getY() + 1.5D;
                double z = loc.getZ() + 0.5D;
                float yaw = player.getLocation().getYaw();
                float pitch = player.getLocation().getPitch();
                player.setVelocity(new Vector(0, 0, 0));
                player.teleport(new Location(player.getWorld(), x, y, z, yaw, pitch));
                player.setFallDistance(0.0F);
                Block glass;
                for(Iterator iterator2 = glasses.iterator(); iterator2.hasNext(); glass.setType(Material.GLASS))
                    glass = (Block)iterator2.next();

            }
    }

    private final bLift plugin;
    Block button;
    Block top;
    Block bottom;
    Player player;
    Block curFloor;
    Block curDest;
    Sign sign;
    boolean isMulti;
    HashMap floors;
    ArrayList glasses;
}